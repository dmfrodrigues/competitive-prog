#include <bits/stdc++.h>
using namespace std;
typedef long long int           lli;
typedef unsigned long long int  ulli;
#define ALL(v)                  (v).begin() , (v).end()
#define FOR(i, b, e)            for(lli i =(b); (i)  < (lli)(e); ++(i))
typedef vector<lli>             VI;
typedef vector<VI>              VVI;
typedef vector<bool>            VB;
typedef vector<VB>              VVB;
typedef pair< lli, lli>         PII;
typedef pair<ulli,ulli>         PUU;
typedef pair<PII,PII>           PPP;
#define X first
#define Y second
const lli INF = 1000000000;

// AN EMPLOYEE CAN BE PROMOTED IF HE HAS NO INCOMING EDGES
// AN EMPLOYEE BEING PROMOTED IS EQUIVALENT TO REMOVING IT FROM THE GRAPH

// WE WANT TO KNOW, FOR A PROMOTIONS, HOW MANY EMPLOYEES WILL CERTAINLY BE PROMOTED
// THAT IS EQUIVALENT TO COUNTING THE NUMBER OF EMPLOYEES THAT CAN POSSIBLY NOT BE PROMOTED
// EVEN AFTER A PROMOTIONS
// THAT IS EQUIVALENT TO KNOWING IF, FOR EMPLOYEE E, IT IS POSSIBLE TO PROMOTE A PEOPLE THAT
// ARE NOT HIM
// THAT IS TRIVIAL, AS WE CAN KEEP REMOVING FROM THE GRAPH THOSE NODES THAT DON'T HAVE INCOMING EDGES
// WE CAN ALSO ALWAYS KEEP TRACK OF THE NODES THAT HAVE NO INCOMING EDGES:
// EACH NODE KNOWS THE INCOMING AND OUTGOING EDGES, AND HAS A COUNT ON INCOMING EDGES.
// PROCESS THE GRAPH AT THE BEGINNING TO GET ALL THAT,
// AND WHEN A NODE IS REMOVED FROM THE GRAPH IT DECREMENTS THE COUNTER OF INCOMING EDGES OF ALL NODES
// THAT SAID NODE HAS ITS OUTGOING EDGES GOING TO; AND IF A COUNTER IS DECREMENTED TO ZERO THAT NODE
// IS ADDED TO THE LIST OF NODES THAT HAVE NO INCOMING EDGES.

// THAT HAS A COMPLEXITY OF O(E+P) FOR A SINGLE EMPLOYEE, WHICH MEANS O(E(E+P)) IN TOTAL.

// THE EMPLOYEES THAT HAVE NO POSSIBILITY OF BEING PROMOTED (EVEN WITH B PROMOTIONS) ARE THOSE THAT
// ABSOLUTELY CAN'T BE PROMOTED WITH B PROMOTIONS. I BELIEVE THESE EMPLOYEES ARE THE SAME THAT
// MUST ABSOLUTELY BE PROMOTED IF THERE ARE E-B PROMOTIONS AND THE EDGES HAVE THE OPPOSITE DIRECTION.

